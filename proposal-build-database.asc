Having reproducible builds allow us to have more than one person
building software and producing identical files. The people who built
the software gpg sign the resulting hashs and upload them somewhere.
The users can download those signed files and check that a build has
been signed by different people.

The process of checking that a build has been signed by different people
is currently manual.

We can automate this process by creating a build signatures database,
and some tools to interact with this database.

How it can work
^^^^^^^^^^^^^^^
The database will be a web service that receive a gpg signed json
file containing :

- a filename

- sha256sum of the file

- optionally one or more URLs where the file can be downloaded

The database server will index those entries and allow they to be
queried by key id, filename, sha256sum, URL.

The Command line tool
^^^^^^^^^^^^^^^^^^^^^
The builddb command line tool will be a tool that can :

with the 'upload' command::
	create the json file containing the sha256sum and url,
	sign it, and upload it to the builds database.

with the 'list' command::
	list the build signatures for a selected filename, sha256sum
	or URL. The type of field being queried is specified as part
	of the argument: filename:some-filename.tar, sha256sum:5ab3122ba9c613e73a1,
	url:http://something/filenam.tar. If the type is not specified it is
	expected to be a filename.

with the 'verify' command::
	do the same as the 'list' command but also verify the signatures,
	using a selected gpg keyring.

with the 'download' command::
	do the same as the 'verify' command, but also download the file,
	and check that it matches the expected sha256sum.

It will take the following options either in a configuration file or as
command line arguments to override the configuration file:

Upload GPG Key ID::
	The GPG Key that should be used to sign the upload.

Upload URL::
	The URL where the file can be downloaded. A '%f' in this string
	will be replaced by the filename. This option can be specified multiple
	times.

Build Database Server::
	The url of the builds database where it should be uploaded.

Verify GPG Keyring::
	A gpg keyring file containing the keys to use to check the build
	signatures. Separated by ':' it takes the minimal number of keys from
	this keyring which should have signed the build.

Usage examples
++++++++++++++
This tool does not exist yet, but this section give usage examples to
show how it could be used if it existed.

Upload a build in the database:
----
$ builddb upload --gpg-key-id 1B678A63 \
	--url https://people.torproject.org/~boklm/builds/%f \
	tor-browser-linux64-3.0-rc-1_en-US.tar.xz
----

Download a file, and require that it has been signed by at least two
people whose key is in the trusted-builders.gpg keyring file :
----
$ builddb download --gpg-keyring trusted-builders.gpg:2 \
	tor-browser-linux64-3.0-rc-1_en-US.tar.xz
Good signature from: 01234567
Good signature from: ABCDEF00
Downloading file: OK
Checking sha256sum: OK
----

Verify that a file you already downloaded has been signed by at least
two people from the trusted-builders.gpg keyring file:
----
$ sha256sum tor-browser-linux64-3.0-rc-1_en-US.tar.xz
6badd587f5c70e34808a98bd9b0b1627e4d9d097e0ed25ab3122ba9c613e73a1  tor-browser-linux64-3.0-rc-1_en-US.tar.xz
$ builddb verify --gpg-keyring trusted-builders.gpg:2 \
	sha256sum:6badd587f5c70e34808a98bd9b0b1627e4d9d097e0ed25ab3122ba9c613e73a1
Good signature from: 01234567
Good signature from: ABCDEF00
----

If we want to verify that it is signed by three people, but it is only
signed by two:
----
$ builddb verify --gpg-keyring trusted-builders.gpg:3 \
	sha256sum:6badd587f5c70e34808a98bd9b0b1627e4d9d097e0ed25ab3122ba9c613e73a1
Error: only 2 signatures from trusted-builders.gpg but 3 required
$ echo $?
1
----

Tor Downloader
^^^^^^^^^^^^^^
A tor downloader tool can be created. It will include a gpg keyring of
trusted tor builders, and a wrapper on 'builddb download' to call it
with the right options or configuration file.

