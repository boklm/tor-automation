:ticket: https://trac.torproject.org/projects/tor/ticket/
:toc:

Tor Automation Review
=====================
Nicolas Vigier <boklm@torproject.org>

This document will review the current status about build process,
packaging, unit and integration testing of all projects that are part
of the tor project, and the tools that are currently used for those
tasks. It will try to list the main tasks that should be planned in the
near and distant future.

It should answer the following questions :

- What is the list of official tor projects, and their status regarding
  build (including deterministic build), testing and packaging automation ?

- What is the list of tools that we currently use and what are their
  limitations ? Which ones do we want to keep ? Which one do we want to
  replace, and what are the available alternatives ? Which new tools do
  we want to use, for which tasks ?

- What do we want to test ? What type of regressions do we want to avoid
  by having tests ? What are the main tests that we want to have ?

- What automation features do we want soon, and what do we want in long
  term ?

If you want to send me a patch, the sources for this document are
available in a https://github.com/boklm/tor-automation[git repository].

Topics definitions
------------------
This section will explain the different topics of this document.

Continuous integration
~~~~~~~~~~~~~~~~~~~~~~
The continuous integration tool is the tool that will monitor a git
repository, and automatically start a new job when there are new commits,
and publish the result of the job.

Common jobs that are started when a new commit is made are :

- build the software on different platforms, to detect build errors

- run a test suite to check that the software is behaving correctly

- publish the build

Common continuous integration tools are :

- Jenkins (previously known as Hudson)

- travis-ci

- buildbot


Reproducible Builds
~~~~~~~~~~~~~~~~~~~
Reproducible (or Deterministic) Builds means that building some software
twice on two different hosts will produce the exact same result.

This blog post provide some explainations about why it is important :
https://blog.torproject.org/blog/deterministic-builds-part-one-cyberwar-and-global-compromise

This blog post provide technical details about how it is currently
achieved :
https://blog.torproject.org/blog/deterministic-builds-part-two-technical-details


Packaging
~~~~~~~~~

Distributions packaging
^^^^^^^^^^^^^^^^^^^^^^^
It's usually better to package the softwares directly into the
distribution repositories, so that users don't have to add an additional
packages repository.

External repositories
^^^^^^^^^^^^^^^^^^^^^
Most distributions have constraining policies regarding package
maintainance in stable distributions. Having an external packages
repository allows use to maintain packages using our own policy.

Some tor packages are available on http://deb.torproject.org/

Tarballs
^^^^^^^^
Sometimes we don't provide packages, but instead provide a tarball that
users will manually extract in their home directory.

It is less convenient than packages, but has some other advantages :

- it works on all distributions

- it does not require root access to install

Continuous packaging
^^^^^^^^^^^^^^^^^^^^
Continuous packaging means building new packages as soon as new commits
are made, and uploading the packages to a repository.

This make it easier for people who want to run the latest developement
version to do it.

If enough disk space is available, history of a few previous builds can
be kept, to make 'git bisect' faster when looking for the commit which
introduced a bug.

Testing
~~~~~~~
There can be different levels of testing:

Unit Testing::
	Unit Tests are low level tests that are checking the functionning
	of some internal functions used in the program. The tools or framwork
	used depend on the language of the program.

Functional and acceptance tests::
	More high level tests, to check that the resulting program is producing
	the expected results. This is usually done using a test framework that
	give you a format to write the tests and some tools to run them and
	report the results. See xref:tool-test-framework[section about test framworks]
	for more details.

Deployement
~~~~~~~~~~~
Some projects are hosted services, and we need to configure and deploy
them when a new release is made. We can use a configuration management
tool to automate that part.

Common configuration management tools are :

- cfengine
- puppet
- ansible
- saltstack


Priorities
~~~~~~~~~~

//TODO
.
//This section will explain how we can define priorities on the work to
//be done.


Projects
--------
In this section we will look at each project that is part of the tor
project, and look the build, packaging and testing of this project to
see the current status and list some proposals.

include::projects.asc[]

Tools
-----

Continuous integration
~~~~~~~~~~~~~~~~~~~~~~
This section will discuss the use of Jenkins, possible improvements or
alternatives.

include::tool-continuous-integration.asc[]


[[tool-test-framework]]
Integration tests framework
~~~~~~~~~~~~~~~~~~~~~~~~~~~
include::tool-test-framework.asc[]


Packaging tools
~~~~~~~~~~~~~~~
This section will discuss the use of some tools for packaging.

Reproducible build tools
~~~~~~~~~~~~~~~~~~~~~~~~
This section will discuss the use of gitian to produce reproducible
builds.

Static analysis tools
~~~~~~~~~~~~~~~~~~~~~
This section will discuss the use of static analysys tools.


Proposal details
----------------

Build tool
~~~~~~~~~~
include::proposal-build-tool.asc[]

[[proposal-builds-database]]
Builds Database
~~~~~~~~~~~~~~~
include::proposal-build-database.asc[]

Test Helpers
~~~~~~~~~~~~
include::proposal-test-helpers.asc[]

Hardware resources
------------------
This section will list the servers which are already available, the
servers which will become available soon, and the new servers we should
consider getting.

Summary
-------
This section will give a summary of the current status on tor automation,
and plans for the future.

