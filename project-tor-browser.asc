Tor browser is the web browser that is included as part of the Tor Bundle
Browser. It is based on Firefox ESR release, with some patches to
improve privacy and make the build reproducible.

The sources are stored in the https://gitweb.torproject.org/tor-browser.git[
tor-browser.git] repository. Because the tor browser is a series of
patches on the Firefox browser, there is no master branch. When a new
Firefox release is available, the new Firefox commits are imported in
the tor-browser.git repository and tagged as *FIREFOX_$VERSION*, and
the tor browser patches are rebased on those commits in a new branch
called *tor-browser-$VERSION*.

Continuous Build
^^^^^^^^^^^^^^^^

Tor Browser is not yet built automatically when there are new commits.

Packaging
^^^^^^^^^

There is no packages available for Tor Browser yet. The Tor Browser is
currently only available as part of the Tor Browser Bundle.

The Tails project is making some Iceweasel packages which include the
Tor Browser patches to include in their distribution. They take the
latest Debian Iceweasel package and add the Tor Browser patches on top
of it, using the process described on
https://tails.boum.org/contribute/release_process/iceweasel/[this page].

Debian and most distributions have a policy about security updates that
require updates to include only minimal changes to fix the security
problem. Because of this policy, having an official Tor Browser package
in those distributions would be a lot of work. However, having packages
on deb.torproject.org would be easier to do.

Testing
^^^^^^^

Testing is currently done manually by volunteers on the tor-qa mailing
list.

There is no automated testing yet. There are plans to add automated
testing using Mozilla Try servers soon.

We need some tests to check the following :

Usability tests::
	We want to check that all websites that work in vanilla Firefox still
	work in Tor Browser. To check this, we can run the tests from Mozilla.
	Mozilla will provide us access to their https://wiki.mozilla.org/ReleaseEngineering/TryServer[
	Try Server] so we can run their tests.

Fingerprinting tests::
	Tor Browser includes some patches to make all Tor Browsers look the
	same. New firefox releases could introduce some changes that make
	the browser stand out from different versions or different setup, so
	we need some tests to check that the fingerprint did not change from
	previous release.

Privacy tests::
	Tor Browser includes some patches to make sure that the browser does
	not leak any information about the user, or its network.

Reproducible build test::
	Tor Browser includes some patches to make the build reproducible. We
	could have a test that check the reproducibility of the build by
	building the browser twice.

//TODO: read https://www.torproject.org/projects/torbrowser/design/
//      and find the other tests that could be useful

Example Bugs
^^^^^^^^^^^^
{ticket}10195[#10195 : Tor Browser crashing in 64-bit Linux builds]::
	A compiler bug caused the tor browser to crash.

{ticket}8143[#8143 : Investigate failure of test_async_notification.js and fix it]::
	A mozilla unit test that was failing. We should be able to notice unit
	test failures when we are pushing to Mozilla's Try servers.

{ticket}10285[#10285 : Write test pages for certain FF24 features]::
	This ticket includes some test pages that can maybe be used for
	automated tests.

Proposals
^^^^^^^^^

Packaging::
	Tor browser is currently only available as part of the Tor Browser
	Bundle. We can produce some packages for Tor Browser, as a first step
	to do continuous packaging. Those packages can also be useful to Tails
	developers.

Continuous packaging::
	If packages are available for Tor Browser, we can also produce packages
	automatically when there are new commits on the browser. See
	xref:proposal-continuous-packaging[continuous packaging proposal] for
	details about how to do that. Packages available for nightly builds
	allows some people to use those builds and hopefully notice and report
	problems such as {ticket}10195[#10195] before the release.

Fingerprinting tests::
	We can implement some tests that extract a fingerprint of a Tor Browser,
	and compare it with previous version of the Tor Browser. See
	xref:helper-fingerprint[fingerprint helper] for details.

Identifier tests::
	We can implement some tests to check that cookies and other possible
	identifiers are saved or not saved depending on the configuration.
	See xref:helper-identifier[identifier helper] for details.

Network leak tests::
	We can implement some tests to check that tor browser does not do any
	direct connection when configured to use tor. To do that we can make
	a script that visit various different web sites, using different
	protocols and different features, while using a tool to monitor network
	activity. See xref:helper-network[network helper] for details about
	this tool.

